name: 🚀 CICD test

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: sandbox
  ECS_SERVICE: node
  ECS_CLUSTER: dev
  ECS_TASK_DEFINITION: .aws/node.json
  CONTAINER_NAME: node

on:
  push:
    branches: 
      - "*"

jobs:
  deploy:
    name: 🥞 Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: 🤖 Checkout
      uses: actions/checkout@v2

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🪵 Login to AWS Registry
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: ⛴️ Docker build and push
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 🎁 Use ECR Image for ECS task 
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: 🏁 Deploy by ECS task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
